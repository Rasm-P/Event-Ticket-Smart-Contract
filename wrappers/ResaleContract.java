package wrappers;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class ResaleContract extends Contract {
    public static final String BINARY = "0x6080604052600360045534801562000015575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200008a575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000819190620001a6565b60405180910390fd5b6200009b81620000a260201b60201c565b50620001c1565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200018e8262000163565b9050919050565b620001a08162000182565b82525050565b5f602082019050620001bb5f83018462000195565b92915050565b61335e80620001cf5f395ff3fe60806040526004361061009b575f3560e01c80638da5cb5b116100635780638da5cb5b1461014d57806392826b4814610177578063b8ee43881461019f578063c6ce9b8a146101c7578063d524d32d146101f1578063f2fde38b146102195761009b565b806301025f6f1461009f57806324d04fa9146100c75780634f55ae6b146100e357806351228abf1461010d578063715018a614610137575b5f80fd5b3480156100aa575f80fd5b506100c560048036038101906100c091906120fe565b610241565b005b6100e160048036038101906100dc91906120fe565b610756565b005b3480156100ee575f80fd5b506100f7610f05565b6040516101049190612401565b60405180910390f35b348015610118575f80fd5b506101216113a2565b60405161012e9190612401565b60405180910390f35b348015610142575f80fd5b5061014b61179d565b005b348015610158575f80fd5b506101616117b0565b60405161016e9190612441565b60405180910390f35b348015610182575f80fd5b5061019d60048036038101906101989190612484565b6117d7565b005b3480156101aa575f80fd5b506101c560048036038101906101c091906120fe565b611822565b005b3480156101d2575f80fd5b506101db611834565b6040516101e891906124be565b60405180910390f35b3480156101fc575f80fd5b50610217600480360381019061021291906124d7565b61183d565b005b348015610224575f80fd5b5061023f600480360381019061023a9190612484565b611e6e565b005b5f60055f8381526020019081526020015f20604051806101a00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815260200160078201805461032a90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461035690612542565b80156103a15780601f10610378576101008083540402835291602001916103a1565b820191905f5260205f20905b81548152906001019060200180831161038457829003601f168201915b505050505081526020016008820180546103ba90612542565b80601f01602080910402602001604051908101604052809291908181526020018280546103e690612542565b80156104315780601f1061040857610100808354040283529160200191610431565b820191905f5260205f20905b81548152906001019060200180831161041457829003601f168201915b5050505050815260200160098201805461044a90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461047690612542565b80156104c15780601f10610498576101008083540402835291602001916104c1565b820191905f5260205f20905b8154815290600101906020018083116104a457829003601f168201915b50505050508152602001600a820180546104da90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461050690612542565b80156105515780601f1061052857610100808354040283529160200191610551565b820191905f5260205f20905b81548152906001019060200180831161053457829003601f168201915b50505050508152602001600b820154815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf906125cc565b60405180910390fd5b806080015180156105eb57508060600151155b61062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062190612634565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301367e6a30338460a001516040518463ffffffff1660e01b815260040161068c93929190612652565b5f604051808303815f87803b1580156106a3575f80fd5b505af11580156106b5573d5f803e3d5ffd5b505050505f60055f8481526020019081526020015f2060030160016101000a81548160ff021916908315150217905550600160025f8282546106f791906126b4565b92505081905550600160065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461074b91906126b4565b925050819055505050565b5f60055f8381526020019081526020015f20604051806101a00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815260200160078201805461083f90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461086b90612542565b80156108b65780601f1061088d576101008083540402835291602001916108b6565b820191905f5260205f20905b81548152906001019060200180831161089957829003601f168201915b505050505081526020016008820180546108cf90612542565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb90612542565b80156109465780601f1061091d57610100808354040283529160200191610946565b820191905f5260205f20905b81548152906001019060200180831161092957829003601f168201915b5050505050815260200160098201805461095f90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461098b90612542565b80156109d65780601f106109ad576101008083540402835291602001916109d6565b820191905f5260205f20905b8154815290600101906020018083116109b957829003601f168201915b50505050508152602001600a820180546109ef90612542565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1b90612542565b8015610a665780601f10610a3d57610100808354040283529160200191610a66565b820191905f5260205f20905b815481529060010190602001808311610a4957829003601f168201915b50505050508152602001600b8201548152505090505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edb6d3ba8360c00151336040518363ffffffff1660e01b8152600401610adc9291906126e7565b602060405180830381865afa158015610af7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612722565b9050816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b86906127bd565b60405180910390fd5b8161018001518110610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd9061284b565b60405180910390fd5b81604001513414610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c13906128d9565b60405180910390fd5b81608001518015610c2f57508160600151155b610c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6590612634565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301367e6a30338560a001516040518463ffffffff1660e01b8152600401610cd093929190612652565b5f604051808303815f87803b158015610ce7575f80fd5b505af1158015610cf9573d5f803e3d5ffd5b505050505f60055f8581526020019081526020015f2060030160016101000a81548160ff021916908315150217905550600160055f8581526020019081526020015f206003015f6101000a81548160ff021916908315150217905550600160025f828254610d6791906126b4565b9250508190555060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d89ca5a28360c00151336040518363ffffffff1660e01b8152600401610dce9291906126e7565b5f604051808303815f87803b158015610de5575f80fd5b505af1158015610df7573d5f803e3d5ffd5b505050505f826020015173ffffffffffffffffffffffffffffffffffffffff1634604051610e2490612924565b5f6040518083038185875af1925050503d805f8114610e5e576040519150601f19603f3d011682016040523d82523d5f602084013e610e63565b606091505b5050905080610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e90612982565b60405180910390fd5b600160065f856020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610ef891906126b4565b9250508190555050505050565b60605f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205467ffffffffffffffff811115610f5f57610f5e6129a0565b5b604051908082528060200260200182016040528015610f9857816020015b610f85612041565b815260200190600190039081610f7d5790505b5090505f805b6001548110156113995760055f8281526020019081526020015f2060030160019054906101000a900460ff1615611386573373ffffffffffffffffffffffffffffffffffffffff1660055f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036113855760055f8281526020019081526020015f20604051806101a00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815260200160078201805461111d90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461114990612542565b80156111945780601f1061116b57610100808354040283529160200191611194565b820191905f5260205f20905b81548152906001019060200180831161117757829003601f168201915b505050505081526020016008820180546111ad90612542565b80601f01602080910402602001604051908101604052809291908181526020018280546111d990612542565b80156112245780601f106111fb57610100808354040283529160200191611224565b820191905f5260205f20905b81548152906001019060200180831161120757829003601f168201915b5050505050815260200160098201805461123d90612542565b80601f016020809104026020016040519081016040528092919081815260200182805461126990612542565b80156112b45780601f1061128b576101008083540402835291602001916112b4565b820191905f5260205f20905b81548152906001019060200180831161129757829003601f168201915b50505050508152602001600a820180546112cd90612542565b80601f01602080910402602001604051908101604052809291908181526020018280546112f990612542565b80156113445780601f1061131b57610100808354040283529160200191611344565b820191905f5260205f20905b81548152906001019060200180831161132757829003601f168201915b50505050508152602001600b8201548152505083838151811061136a576113696129cd565b5b602002602001018190525060018261138291906129fa565b91505b5b808061139190612a2d565b915050610f9e565b50819250505090565b60605f60025467ffffffffffffffff8111156113c1576113c06129a0565b5b6040519080825280602002602001820160405280156113fa57816020015b6113e7612041565b8152602001906001900390816113df5790505b5090505f805b6001548110156117945760055f8281526020019081526020015f2060030160019054906101000a900460ff16156117815760055f8281526020019081526020015f20604051806101a00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815260200160078201805461151990612542565b80601f016020809104026020016040519081016040528092919081815260200182805461154590612542565b80156115905780601f1061156757610100808354040283529160200191611590565b820191905f5260205f20905b81548152906001019060200180831161157357829003601f168201915b505050505081526020016008820180546115a990612542565b80601f01602080910402602001604051908101604052809291908181526020018280546115d590612542565b80156116205780601f106115f757610100808354040283529160200191611620565b820191905f5260205f20905b81548152906001019060200180831161160357829003601f168201915b5050505050815260200160098201805461163990612542565b80601f016020809104026020016040519081016040528092919081815260200182805461166590612542565b80156116b05780601f10611687576101008083540402835291602001916116b0565b820191905f5260205f20905b81548152906001019060200180831161169357829003601f168201915b50505050508152602001600a820180546116c990612542565b80601f01602080910402602001604051908101604052809291908181526020018280546116f590612542565b80156117405780601f1061171757610100808354040283529160200191611740565b820191905f5260205f20905b81548152906001019060200180831161172357829003601f168201915b50505050508152602001600b82015481525050838381518110611766576117656129cd565b5b602002602001018190525060018261177e91906129fa565b91505b808061178c90612a2d565b915050611400565b50819250505090565b6117a5611ef2565b6117ae5f611f79565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6117df611ef2565b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61182a611ef2565b8060048190555050565b5f600454905090565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161189791906124be565b602060405180830381865afa1580156118b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118d69190612a88565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193a90612b23565b60405180910390fd5b60018111611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197d90612bb1565b60405180910390fd5b60045460065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205410611a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fe90612c3f565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301367e6a3330856040518463ffffffff1660e01b8152600401611a6593929190612652565b5f604051808303815f87803b158015611a7c575f80fd5b505af1158015611a8e573d5f803e3d5ffd5b505050505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9895e6a846040518263ffffffff1660e01b8152600401611aed91906124be565b608060405180830381865afa158015611b08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b2c9190612d4f565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b98079bc83602001516040518263ffffffff1660e01b8152600401611b8d91906124be565b5f60405180830381865afa158015611ba7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611bcf9190612fe7565b9050806101000151831115611c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c109061309e565b60405180910390fd5b5f60015490506001805f828254611c3091906129fa565b92505081905550600160025f828254611c4991906129fa565b92505081905550604051806101a001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020015f15158152602001600115158152602001845f015181526020018460200151815260200184604001518152602001836020015181526020018360a0015181526020018360c0015181526020018360e00151815260200183610120015181525060055f8381526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a0820151816004015560c0820151816005015560e08201518160060155610100820151816007019081611dbf9190613259565b50610120820151816008019081611dd69190613259565b50610140820151816009019081611ded9190613259565b5061016082015181600a019081611e049190613259565b5061018082015181600b0155905050600160065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611e6091906129fa565b925050819055505050505050565b611e76611ef2565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ee6575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611edd9190612441565b60405180910390fd5b611eef81611f79565b50565b611efa61203a565b73ffffffffffffffffffffffffffffffffffffffff16611f186117b0565b73ffffffffffffffffffffffffffffffffffffffff1614611f7757611f3b61203a565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611f6e9190612441565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b604051806101a001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f151581526020015f151581526020015f81526020015f81526020015f8152602001606081526020016060815260200160608152602001606081526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6120dd816120cb565b81146120e7575f80fd5b50565b5f813590506120f8816120d4565b92915050565b5f60208284031215612113576121126120c3565b5b5f612120848285016120ea565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61215b816120cb565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61218a82612161565b9050919050565b61219a81612180565b82525050565b5f8115159050919050565b6121b4816121a0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156121f15780820151818401526020810190506121d6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612216826121ba565b61222081856121c4565b93506122308185602086016121d4565b612239816121fc565b840191505092915050565b5f6101a083015f83015161225a5f860182612152565b50602083015161226d6020860182612191565b5060408301516122806040860182612152565b50606083015161229360608601826121ab565b5060808301516122a660808601826121ab565b5060a08301516122b960a0860182612152565b5060c08301516122cc60c0860182612152565b5060e08301516122df60e0860182612152565b506101008301518482036101008601526122f9828261220c565b915050610120830151848203610120860152612315828261220c565b915050610140830151848203610140860152612331828261220c565b91505061016083015184820361016086015261234d828261220c565b915050610180830151612364610180860182612152565b508091505092915050565b5f61237a8383612244565b905092915050565b5f602082019050919050565b5f61239882612129565b6123a28185612133565b9350836020820285016123b485612143565b805f5b858110156123ef57848403895281516123d0858261236f565b94506123db83612382565b925060208a019950506001810190506123b7565b50829750879550505050505092915050565b5f6020820190508181035f830152612419818461238e565b905092915050565b5f61242b82612161565b9050919050565b61243b81612421565b82525050565b5f6020820190506124545f830184612432565b92915050565b61246381612421565b811461246d575f80fd5b50565b5f8135905061247e8161245a565b92915050565b5f60208284031215612499576124986120c3565b5b5f6124a684828501612470565b91505092915050565b6124b8816120cb565b82525050565b5f6020820190506124d15f8301846124af565b92915050565b5f80604083850312156124ed576124ec6120c3565b5b5f6124fa858286016120ea565b925050602061250b858286016120ea565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061255957607f821691505b60208210810361256c5761256b612515565b5b50919050565b5f82825260208201905092915050565b7f53656e646572206d757374206265206c697374696e67206f776e6572210000005f82015250565b5f6125b6601d83612572565b91506125c182612582565b602082019050919050565b5f6020820190508181035f8301526125e3816125aa565b9050919050565b7f4c697374696e67206d757374207374696c6c20626520666f722073616c6521005f82015250565b5f61261e601f83612572565b9150612629826125ea565b602082019050919050565b5f6020820190508181035f83015261264b81612612565b9050919050565b5f6060820190506126655f830186612432565b6126726020830185612432565b61267f60408301846124af565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6126be826120cb565b91506126c9836120cb565b92508282039050818111156126e1576126e0612687565b5b92915050565b5f6040820190506126fa5f8301856124af565b6127076020830184612432565b9392505050565b5f8151905061271c816120d4565b92915050565b5f60208284031215612737576127366120c3565b5b5f6127448482850161270e565b91505092915050565b7f437573746f6d65722063616e6e6f7420627579207468656972206f776e2074695f8201527f636b657473210000000000000000000000000000000000000000000000000000602082015250565b5f6127a7602683612572565b91506127b28261274d565b604082019050919050565b5f6020820190508181035f8301526127d48161279b565b9050919050565b7f437573746f6d6572207469636b657420636f756e7420666f72206576656e74205f8201527f6d757374206265206c6f776572207468616e20746865206c696d697421000000602082015250565b5f612835603d83612572565b9150612840826127db565b604082019050919050565b5f6020820190508181035f83015261286281612829565b9050919050565b7f53656e6465722076616c7565206d75737420657175616c20746865206c6973745f8201527f696e672070726963652100000000000000000000000000000000000000000000602082015250565b5f6128c3602a83612572565b91506128ce82612869565b604082019050919050565b5f6020820190508181035f8301526128f0816128b7565b9050919050565b5f81905092915050565b50565b5f61290f5f836128f7565b915061291a82612901565b5f82019050919050565b5f61292e82612904565b9150819050919050565b7f5061796d656e74207472616e73666572206661696c65642100000000000000005f82015250565b5f61296c601883612572565b915061297782612938565b602082019050919050565b5f6020820190508181035f83015261299981612960565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f612a04826120cb565b9150612a0f836120cb565b9250828201905080821115612a2757612a26612687565b5b92915050565b5f612a37826120cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6957612a68612687565b5b600182019050919050565b5f81519050612a828161245a565b92915050565b5f60208284031215612a9d57612a9c6120c3565b5b5f612aaa84828501612a74565b91505092915050565b7f4f6e6c7920746865206f776e6572206f6620746865207469636b65742063616e5f8201527f2063616c6c20746869732066756e6374696f6e21000000000000000000000000602082015250565b5f612b0d603483612572565b9150612b1882612ab3565b604082019050919050565b5f6020820190508181035f830152612b3a81612b01565b9050919050565b7f526573616c65207072696365206d7573742062652067726561746572207468615f8201527f6e20312077656921000000000000000000000000000000000000000000000000602082015250565b5f612b9b602883612572565b9150612ba682612b41565b604082019050919050565b5f6020820190508181035f830152612bc881612b8f565b9050919050565b7f437573746f6d65722063616e6e6f7420707574207570206d6f7265206c6973745f8201527f696e6773207468616e20746865206c697374696e67206c696d69742100000000602082015250565b5f612c29603c83612572565b9150612c3482612bcf565b604082019050919050565b5f6020820190508181035f830152612c5681612c1d565b9050919050565b5f80fd5b612c6a826121fc565b810181811067ffffffffffffffff82111715612c8957612c886129a0565b5b80604052505050565b5f612c9b6120ba565b9050612ca78282612c61565b919050565b5f80fd5b612cb9816121a0565b8114612cc3575f80fd5b50565b5f81519050612cd481612cb0565b92915050565b5f60808284031215612cef57612cee612c5d565b5b612cf96080612c92565b90505f612d088482850161270e565b5f830152506020612d1b8482850161270e565b6020830152506040612d2f8482850161270e565b6040830152506060612d4384828501612cc6565b60608301525092915050565b5f60808284031215612d6457612d636120c3565b5b5f612d7184828501612cda565b91505092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115612d9c57612d9b6129a0565b5b612da5826121fc565b9050602081019050919050565b5f612dc4612dbf84612d82565b612c92565b905082815260208101848484011115612de057612ddf612d7e565b5b612deb8482856121d4565b509392505050565b5f82601f830112612e0757612e06612d7a565b5b8151612e17848260208601612db2565b91505092915050565b5f6101808284031215612e3657612e35612c5d565b5b612e41610180612c92565b90505f612e508482850161270e565b5f83015250602082015167ffffffffffffffff811115612e7357612e72612cac565b5b612e7f84828501612df3565b602083015250604082015167ffffffffffffffff811115612ea357612ea2612cac565b5b612eaf84828501612df3565b6040830152506060612ec38482850161270e565b6060830152506080612ed78482850161270e565b60808301525060a082015167ffffffffffffffff811115612efb57612efa612cac565b5b612f0784828501612df3565b60a08301525060c082015167ffffffffffffffff811115612f2b57612f2a612cac565b5b612f3784828501612df3565b60c08301525060e082015167ffffffffffffffff811115612f5b57612f5a612cac565b5b612f6784828501612df3565b60e083015250610100612f7c8482850161270e565b61010083015250610120612f928482850161270e565b6101208301525061014082015167ffffffffffffffff811115612fb857612fb7612cac565b5b612fc484828501612df3565b61014083015250610160612fda84828501612a74565b6101608301525092915050565b5f60208284031215612ffc57612ffb6120c3565b5b5f82015167ffffffffffffffff811115613019576130186120c7565b5b61302584828501612e20565b91505092915050565b7f526573616c652070726963652063616e6e6f74206265206869676865722074685f8201527f616e207075726368617365207072696365210000000000000000000000000000602082015250565b5f613088603283612572565b91506130938261302e565b604082019050919050565b5f6020820190508181035f8301526130b58161307c565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026131187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826130dd565b61312286836130dd565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61315d613158613153846120cb565b61313a565b6120cb565b9050919050565b5f819050919050565b61317683613143565b61318a61318282613164565b8484546130e9565b825550505050565b5f90565b61319e613192565b6131a981848461316d565b505050565b5b818110156131cc576131c15f82613196565b6001810190506131af565b5050565b601f821115613211576131e2816130bc565b6131eb846130ce565b810160208510156131fa578190505b61320e613206856130ce565b8301826131ae565b50505b505050565b5f82821c905092915050565b5f6132315f1984600802613216565b1980831691505092915050565b5f6132498383613222565b9150826002028217905092915050565b613262826121ba565b67ffffffffffffffff81111561327b5761327a6129a0565b5b6132858254612542565b6132908282856131d0565b5f60209050601f8311600181146132c1575f84156132af578287015190505b6132b9858261323e565b865550613320565b601f1984166132cf866130bc565b5f5b828110156132f6578489015182556001820191506020850194506020810190506132d1565b86831015613313578489015161330f601f891682613222565b8355505b6001600288020188555050505b50505050505056fea26469706673582212208b766959f32721822e12b599ce9a239313fd836cd41cb8e46abff9e7ab6f708464736f6c63430008140033";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_LISTTICKETFORSALE = "listTicketForSale";

    public static final String FUNC_GETTICKETSFORRESALE = "getTicketsForResale";

    public static final String FUNC_GETTICKETSLISTEDBYSENDER = "getTicketsListedBySender";

    public static final String FUNC_WITHDRAWFROMRESALELIST = "withdrawFromResaleList";

    public static final String FUNC_PURCHASETICKETFROMRESALE = "purchaseTicketFromResale";

    public static final String FUNC_SETLISTINGLIMIT = "setListingLimit";

    public static final String FUNC_GETLISTINGLIMIT = "getListingLimit";

    public static final String FUNC_SETTICKETCONTRACTADDRESS = "setTicketContractAddress";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ResaleContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ResaleContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ResaleContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ResaleContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> listTicketForSale(BigInteger _ticketId, BigInteger _resalePrice) {
        final Function function = new Function(
                FUNC_LISTTICKETFORSALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ticketId), 
                new org.web3j.abi.datatypes.generated.Uint256(_resalePrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getTicketsForResale() {
        final Function function = new Function(FUNC_GETTICKETSFORRESALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ListedTicket>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getTicketsListedBySender() {
        final Function function = new Function(FUNC_GETTICKETSLISTEDBYSENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ListedTicket>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawFromResaleList(BigInteger _listingId) {
        final Function function = new Function(
                FUNC_WITHDRAWFROMRESALELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_listingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseTicketFromResale(BigInteger _listingId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PURCHASETICKETFROMRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_listingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setListingLimit(BigInteger _limit) {
        final Function function = new Function(
                FUNC_SETLISTINGLIMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_limit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getListingLimit() {
        final Function function = new Function(FUNC_GETLISTINGLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setTicketContractAddress(String _ticketAddress) {
        final Function function = new Function(
                FUNC_SETTICKETCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_ticketAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ResaleContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ResaleContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ResaleContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ResaleContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ResaleContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ResaleContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ResaleContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ResaleContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ResaleContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ResaleContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<ResaleContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ResaleContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ResaleContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ResaleContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ResaleContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ResaleContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ListedTicket extends DynamicStruct {
        public BigInteger listingId;

        public String listingOwner;

        public BigInteger listingPrice;

        public Boolean hasBeenResold;

        public Boolean listedForResale;

        public BigInteger tokenId;

        public BigInteger eventId;

        public BigInteger seatNr;

        public String eventName;

        public String eventLocation;

        public String eventDate;

        public String eventTime;

        public BigInteger ticketsPrCustomer;

        public ListedTicket(BigInteger listingId, String listingOwner, BigInteger listingPrice, Boolean hasBeenResold, Boolean listedForResale, BigInteger tokenId, BigInteger eventId, BigInteger seatNr, String eventName, String eventLocation, String eventDate, String eventTime, BigInteger ticketsPrCustomer) {
            super(new org.web3j.abi.datatypes.generated.Uint256(listingId), 
                    new org.web3j.abi.datatypes.Address(listingOwner), 
                    new org.web3j.abi.datatypes.generated.Uint256(listingPrice), 
                    new org.web3j.abi.datatypes.Bool(hasBeenResold), 
                    new org.web3j.abi.datatypes.Bool(listedForResale), 
                    new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventId), 
                    new org.web3j.abi.datatypes.generated.Uint256(seatNr), 
                    new org.web3j.abi.datatypes.Utf8String(eventName), 
                    new org.web3j.abi.datatypes.Utf8String(eventLocation), 
                    new org.web3j.abi.datatypes.Utf8String(eventDate), 
                    new org.web3j.abi.datatypes.Utf8String(eventTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(ticketsPrCustomer));
            this.listingId = listingId;
            this.listingOwner = listingOwner;
            this.listingPrice = listingPrice;
            this.hasBeenResold = hasBeenResold;
            this.listedForResale = listedForResale;
            this.tokenId = tokenId;
            this.eventId = eventId;
            this.seatNr = seatNr;
            this.eventName = eventName;
            this.eventLocation = eventLocation;
            this.eventDate = eventDate;
            this.eventTime = eventTime;
            this.ticketsPrCustomer = ticketsPrCustomer;
        }

        public ListedTicket(Uint256 listingId, Address listingOwner, Uint256 listingPrice, Bool hasBeenResold, Bool listedForResale, Uint256 tokenId, Uint256 eventId, Uint256 seatNr, Utf8String eventName, Utf8String eventLocation, Utf8String eventDate, Utf8String eventTime, Uint256 ticketsPrCustomer) {
            super(listingId, listingOwner, listingPrice, hasBeenResold, listedForResale, tokenId, eventId, seatNr, eventName, eventLocation, eventDate, eventTime, ticketsPrCustomer);
            this.listingId = listingId.getValue();
            this.listingOwner = listingOwner.getValue();
            this.listingPrice = listingPrice.getValue();
            this.hasBeenResold = hasBeenResold.getValue();
            this.listedForResale = listedForResale.getValue();
            this.tokenId = tokenId.getValue();
            this.eventId = eventId.getValue();
            this.seatNr = seatNr.getValue();
            this.eventName = eventName.getValue();
            this.eventLocation = eventLocation.getValue();
            this.eventDate = eventDate.getValue();
            this.eventTime = eventTime.getValue();
            this.ticketsPrCustomer = ticketsPrCustomer.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
